const pseudocodeRules = {
  BEGIN: /^BEGIN$/,
  END: /^END$/,
  INPUT: /^INPUT\s+\w+(,\s*\w+)*\s*$/,
  OUTPUT: /^OUTPUT\s+[\w\s,]+$/,
  IF: /^IF\s+.+\s+DO$/,
  ELSE: /^ELSE$/,
  ENDIF: /^ENDIF$/,
  WHILE: /^WHILE\s+.+\s+DO$/,
  ENDWHILE: /^ENDWHILE$/,
  ASSIGNMENT: /^\w+\s*=\s*.+$/ // Biá»ƒu thá»©c gÃ¡n
};

export const checkPseudocodeSyntax = (code: string) => {
  const lines = code
    .trim()
    .split('\n')
    .map((line) => line.trim());
  console.log('ğŸš€ ~ checkPseudocodeSyntax ~ lines:', lines);
  const stack = [];

  for (let i = 0; i < lines.length; i++) {
    const line = lines[i];

    console.log(i, pseudocodeRules.END.test(line));
    if (pseudocodeRules.BEGIN.test(line)) {
      stack.push('BEGIN');
    } else if (pseudocodeRules.END.test(line)) {
      if (stack.pop() !== 'BEGIN') {
        return `Lá»—i: 'END' mÃ  khÃ´ng cÃ³ 'BEGIN' táº¡i dÃ²ng ${i + 1}`;
      }
    } else if (pseudocodeRules.IF.test(line)) {
      stack.push('IF');
    } else if (pseudocodeRules.ENDIF.test(line)) {
      if (stack.pop() !== 'IF') {
        return `Lá»—i: 'ENDIF' mÃ  khÃ´ng cÃ³ 'IF' táº¡i dÃ²ng ${i + 1}`;
      }
    } else if (pseudocodeRules.WHILE.test(line)) {
      stack.push('WHILE');
    } else if (pseudocodeRules.ENDWHILE.test(line)) {
      if (stack.pop() !== 'WHILE') {
        return `Lá»—i: 'ENDWHILE' mÃ  khÃ´ng cÃ³ 'WHILE' táº¡i dÃ²ng ${i + 1}`;
      }
    } else if (
      pseudocodeRules.INPUT.test(line) ||
      pseudocodeRules.OUTPUT.test(line)
    ) {
      // DÃ²ng INPUT vÃ  OUTPUT há»£p lá»‡, khÃ´ng cáº§n lÃ m gÃ¬
    } else if (pseudocodeRules.ASSIGNMENT.test(line)) {
      // DÃ²ng gÃ¡n há»£p lá»‡
    } else {
      return `Lá»—i cÃº phÃ¡p táº¡i dÃ²ng ${i + 1}: "${line}" khÃ´ng há»£p lá»‡.`;
    }
  }

  if (stack.length > 0) {
    return `Lá»—i: Thiáº¿u 'END' cho cÃ¡c khá»‘i chÆ°a Ä‘Ã³ng.`;
  }

  return 'CÃº phÃ¡p há»£p lá»‡.';
};
